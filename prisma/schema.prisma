// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum RoleUser {
  CUSTOMER 
  ADMIN
}

enum TypeSeat {
  ECONOMY
  BUSSINES
  FIRST
}

enum TicketStatus {
  PENDING
  SUCCESS
  FAILED
}


model User {
  id String @id @default(cuid())
  name String
  email String @unique
  password String
  passport String?
  role RoleUser
  ticket Tickets[]
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Airplane {
    id String @id @default(cuid())
    code String @default("ABC-123")
    name String
    image String
    flight Flight[]
}

model Flight {
   id String @id @default(cuid())
  airplaneId String
  airplane Airplane @relation(fields: [airplaneId], references: [id])
  depature_date DateTime
  depature_city String
  depature_city_code String
  arrival_date String
  destination_city String
  destination_city_code String
  price Int
  seats FlightSeat[]
  tickets Tickets[]
}

model FlightSeat {
   id String @id @default(cuid())
   flightId String
   flight Flight @relation(fields: [flightId], references: [id])
   seat_number String
   isBooked Boolean? @default(false)
   type TypeSeat
   ticket Tickets?
}

model Tickets {
   id String @id @default(cuid())
   code String @unique
   flightId String
   flight Flight @relation(fields: [flightId], references: [id])
   customerId String
   customer User @relation(fields: [customerId], references: [id])
   seatId String @unique
   seat FlightSeat @relation(fields: [seatId], references: [id])
   bookingDate DateTime
   price BigInt
   status TicketStatus
   tokenMidtrans String? 
}